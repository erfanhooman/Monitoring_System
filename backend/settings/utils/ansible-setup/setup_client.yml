---
- name: Setup client system
  hosts: clients
  become: true
  become_user: root
  vars:
    zabbix_repo_url: "https://repo.zabbix.com/zabbix/6.0/rhel/9/x86_64/zabbix-release-latest-6.0.el9.noarch.rpm"
    zabbix_gpg_key: "https://repo.zabbix.com/RPM-GPG-KEY-ZABBIX-A14FE591"
    db_name: "zabbix"
    db_user: "zabbix"
    db_password: "password"
    root_password: "root_password"

  tasks:
    - name: Check if system is Red Hat-based
      set_fact:
        is_redhat: "{{ ansible_facts.os_family == 'RedHat' }}"

    - name: Check if system is Debian-based
      set_fact:
        is_debian: "{{ ansible_facts.os_family == 'Debian' }}"

    - name: Install Zabbix for Red Hat-based systems
      when: is_redhat
      block:
        - name: Disable Zabbix packages in EPEL repository
          lineinfile:
            path: /etc/yum.repos.d/epel.repo
            regexp: '^excludepkgs='
            line: 'excludepkgs=zabbix*'
            create: yes
            insertafter: '[epel]'

        - name: Install Zabbix repository
          yum:
            name: "{{ zabbix_repo_url }}"
            state: present
            disable_gpg_check: yes
          register: repo_installed

        - name: Set Zabbix repository priority to ensure its packages are used
          copy:
            dest: /etc/yum.repos.d/zabbix.repo
            content: |
              [zabbix]
              name=Zabbix Official Repository - $releasever $basearch
              baseurl=https://repo.zabbix.com/zabbix/6.0/rhel/$releasever/$basearch/
              enabled=1
              gpgcheck=0
              priority=1

        - name: Clean DNF cache
          command: dnf clean all
          when: repo_installed is changed

        - name: Install Zabbix server, frontend, and agent
          yum:
            name:
              - zabbix-server-mysql
              - zabbix-web-mysql
              - zabbix-apache-conf
              - zabbix-sql-scripts
              - zabbix-selinux-policy
              - zabbix-agent
            state: present

        - name: Install required packages
          yum:
            name:
              - mariadb-server
              - python3-PyMySQL
            state: present

        - name: Start and enable MySQL systemd-service
          systemd:
            name: mariadb
            state: started
            enabled: true

        - name: Check if MySQL root password is set
          shell: |
            mysqladmin -uroot status
          register: mysql_root_status
          ignore_errors: true

        - name: Set MySQL root password if not initialized
          shell: |
            mysqladmin -uroot password "{{ root_password }}"
          when: mysql_root_status.failed

        - name: Secure MySQL installation
          shell: |
            mysql -uroot -p"{{ root_password }}" <<EOF
            DELETE FROM mysql.user WHERE User='';
            DROP DATABASE IF EXISTS test;
            DELETE FROM mysql.db WHERE Db='test' OR Db='test\_%';
            FLUSH PRIVILEGES;
            EOF
          when: mysql_root_status.failed

        - name: Create Zabbix database and user
          shell: |
            mysql -uroot -p"{{ root_password }}" <<EOF
            CREATE DATABASE IF NOT EXISTS {{ db_name }} CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;
            CREATE USER IF NOT EXISTS '{{ db_user }}'@'localhost' IDENTIFIED BY '{{ db_password }}';
            GRANT ALL PRIVILEGES ON {{ db_name }}.* TO '{{ db_user }}'@'localhost';
            SET GLOBAL log_bin_trust_function_creators = 1;
            FLUSH PRIVILEGES;
            EOF
        
        - name: Check if Zabbix database is already initialized
          shell: |
            mysql -u{{ db_user }} -p{{ db_password }} -e "USE {{ db_name }}; SHOW TABLES LIKE 'role';"
          register: zabbix_db_check
          failed_when: false
          changed_when: false

        - name: Log message if the database is already initialized
          debug:
            msg: "Zabbix database is already initialized. Skipping schema import."
          when: zabbix_db_check.stdout != ""

        - name: Import initial schema and data into the database
          shell: >
            zcat /usr/share/zabbix-sql-scripts/mysql/server.sql.gz |
            mysql --default-character-set=utf8mb4 -u{{ db_user }} -p{{ db_password }} {{ db_name }}
          when: zabbix_db_check.stdout == ""
          register: import_schema
          ignore_errors: false

        - name: Disable log_bin_trust_function_creators after schema import
          shell: |
            mysql -uroot -p"{{ root_password }}" -e "SET GLOBAL log_bin_trust_function_creators = 0;"

        - name: Configure Zabbix server database password
          lineinfile:
            path: /etc/zabbix/zabbix_server.conf
            regexp: '^DBPassword='
            line: 'DBPassword={{ db_password }}'
            create: yes

        - name: Restart and enable Zabbix services
          systemd:
            name: "{{ item }}"
            state: restarted
            enabled: true
          loop:
            - zabbix-server
            - zabbix-agent
            - httpd
            - php-fpm

        - name: Install Redis if not installed
          ansible.builtin.package:
            name: redis
            state: present

        - name: Start Redis systemd-service
          ansible.builtin.service:
            name: redis
            state: started

        - name: Enable Redis systemd-service
          ansible.builtin.service:
            name: redis
            enabled: yes

        - name: Ensure destination directory exists
          ansible.builtin.file:
            path: "/opt/zabbix_helper"
            state: directory
            mode: '0755'

        - name: Copy project files
          ansible.builtin.copy:
            src: "/home/erfan/Desktop/Projects/UNI_Project/Monitoring_System/local_back"
            dest: "/opt/zabbix_helper"
            mode: '0755'
          ignore_errors: true

        - name: Install Python
          ansible.builtin.package:
            name:
              - python3.12
            state: present

        - name: Install pip using ensurepip (if not already installed)
          ansible.builtin.shell: |
            python3.12 -m ensurepip --upgrade
          args:
            creates: /usr/bin/pip3
          register: ensurepip_result
          failed_when: "'No module named ensurepip' in ensurepip_result.stderr"

        - name: Install pip manually if ensurepip is unavailable
          ansible.builtin.get_url:
            url: https://bootstrap.pypa.io/get-pip.py
            dest: /tmp/get-pip.py
          when: "'No module named ensurepip' in ensurepip_result.stderr"

        - name: Run get-pip.py to install pip
          ansible.builtin.command:
            cmd: python3 /tmp/get-pip.py
          when: "'No module named ensurepip' in ensurepip_result.stderr"

        - name: Upgrade pip to the latest version
          ansible.builtin.shell: |
            python3.12 -m pip install --upgrade pip
          args:
            creates: /usr/local/bin/pip

        - name: Install virtualenv (if venv is unavailable)
          ansible.builtin.shell: |
            python3.12 -m pip install --upgrade virtualenv
          args:
            creates: /usr/local/bin/virtualenv

        - name: Create Python virtual environment
          ansible.builtin.command:
            cmd: python3.12 -m venv /opt/zabbix_helper/venv3.12
            creates: /opt/zabbix_helper/venv3.12

        - name: update pip
          ansible.builtin.command:
            cmd: "/opt/zabbix_helper/venv3.12/bin/pip install --upgrade pip"
            chdir: /opt/zabbix_helper

        - name: Install requirements
          ansible.builtin.command:
            cmd: "/opt/zabbix_helper/venv3.12/bin/pip install -r /opt/zabbix_helper/local_back/requirements.txt"
            chdir: /opt/zabbix_helper
          register: pip_install_output

        - name: Create logs directory
          ansible.builtin.file:
            path: /opt/zabbix_helper/logs
            state: directory
            owner: root
            group: root
            mode: '0755'

        - name: Deploy Celery Worker service
          ansible.builtin.template:
            src: systemd-service/celery-worker.service
            dest: /etc/systemd/system/celery-worker.service
            owner: root
            group: root
            mode: 0644

        - name: Deploy Celery Beat service
          ansible.builtin.template:
            src: systemd-service/celery-beat.service
            dest: /etc/systemd/system/celery-beat.service
            owner: root
            group: root
            mode: 0644

        - name: Deploy User Alert Preference service
          ansible.builtin.template:
            src: systemd-service/user-alert-preference.service
            dest: /etc/systemd/system/user-alert-preference.service
            owner: root
            group: root
            mode: 0644

        - name: Reload systemd daemon
          ansible.builtin.systemd:
            daemon_reload: yes

        - name: Enable and start Celery Worker
          ansible.builtin.systemd:
            name: celery-worker
            enabled: yes
            state: started

        - name: Enable and start Celery Beat
          ansible.builtin.systemd:
            name: celery-beat
            enabled: yes
            state: started

        - name: Enable and start User Alert Preference
          ansible.builtin.systemd:
            name: user-alert-preference
            enabled: yes
            state: started