---
- name: Setup client system
  hosts: clients
  become: true
  become_user: root
  tasks:

    - name: Check if system is Red Hat-based
      set_fact:
        is_redhat: "{{ ansible_facts.os_family == 'RedHat' }}"

    - name: Check if system is Debian-based
      set_fact:
        is_debian: "{{ ansible_facts.os_family == 'Debian' }}"

    # Step 1: Install/Update Zabbix
    - name: Install Zabbix for Red Hat-based systems
      when: is_redhat
      block:
        - name: Add Zabbix repository
          ansible.builtin.yum:
            name: "https://repo.zabbix.com/zabbix/6.0/rhel/{{ ansible_distribution_major_version }}/x86_64/zabbix-release-latest-6.0.el{{ ansible_distribution_major_version }}.noarch.rpm"
            state: present

        - name: Install Zabbix packages
          ansible.builtin.yum:
            name:
              - zabbix-server-pgsql
              - zabbix-agent
            state: latest

    - name: Install Zabbix for Debian-based systems
      when: is_debian
      block:
        - name: Add Zabbix repository
          ansible.builtin.apt:
            deb:
              repo: "deb https://repo.zabbix.com/zabbix/6.0/{{ ansible_distribution | lower }} {{ ansible_distribution_release | lower }} main"
              state: present
          register: zabbix_repo

        - name: Update and install Zabbix packages
          ansible.builtin.apt:
            name:
              - zabbix-server-pgsql
              - zabbix-agent
            state: latest
            update_cache: yes

    # Step 2: Install/Stop Redis
    - name: Install Redis if not installed
      ansible.builtin.package:
        name: redis
        state: present

    - name: Stop Redis systemd-service
      ansible.builtin.service:
        name: redis
        state: stopped

    # Step 3: Move files and code
    - name: Ensure destination directory exists
      ansible.builtin.file:
        path: "/opt/zabbix_helper"
        state: directory
        mode: '0755'

    - name: Copy project files
      ansible.builtin.copy:
        src: "/home/erfan/Desktop/Projects/UNI_Project/Monitoring_System/local_back"
        dest: "/opt/zabbix_helper"
        mode: '0755'
      ignore_errors: true  # Skip if files are already present

    # Step 4: Create Python environment and install dependencies
    - name: Install Python and venv package
      ansible.builtin.package:
        name:
          - python3
          - python3-venv
        state: present

    - name: Create Python virtual environment
      ansible.builtin.command:
        cmd: python3 -m venv /opt/zabbix_helper/venv
        creates: /opt/zabbix_helper/venv

    - name: Install requirements
      ansible.builtin.command:
        cmd: "/opt/zabbix_helper/venv/bin/pip install -r /opt/zabbix_helper/requirements.txt"
        args:
          chdir: /opt/zabbix_helper
        register: pip_install_output

    # Step 5: Run user_alert_prefrence.py
    - name: Run user_alert_prefrence.py
      ansible.builtin.shell:
        cmd: "/opt/zabbix_helper/venv/bin/python user_alert_prefrence.py"
        args:
          chdir: /opt/zabbix_helper

    # Step 6: Start Celery workers and beat
    - name: Start Celery worker
      ansible.builtin.shell:
        cmd: "/opt/zabbix_helper/venv/bin/celery -A celery_app worker --loglevel=info &"
        args:
          chdir: /opt/zabbix_helper

    - name: Start Celery beat
      ansible.builtin.shell:
        cmd: "/opt/zabbix_helper/venv/bin/celery -A celery_app beat --loglevel=info &"
        args:
          chdir: /opt/zabbix_helper
